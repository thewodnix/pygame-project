Index: Start_window.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom load_sprites import load_image\r\n\r\n# Создаём окно Pygame\r\npygame.init()\r\nsize = width, height = 1500, 800\r\nscreen = pygame.display.set_mode(size)\r\nanimation_set = [load_image(f'photo_data/photo_menu_data', f\"Pac_manModel{i}.png\", 'WHITE') for i in range(1, 4)]\r\npygame.display.set_caption('PAC-MAN')\r\nsound_pac = pygame.mixer.Sound('music_menu_data/Voicy_Pac-Man Pellet Eaten.mp3')\r\nsound_click = pygame.mixer.Sound('music_menu_data/click_sound.mp3')\r\nclock = pygame.time.Clock()\r\n\r\nfont_fade = pygame.USEREVENT + 1\r\npygame.time.set_timer(font_fade, 800)\r\nfont_text = pygame.font.SysFont(None, 40)\r\nshow_text = True\r\ntext_surf = font_text.render('press  any  button  to  start', True, (255, 255, 0))\r\nx_pos = -90\r\n\r\n\r\ndef menu_shower():\r\n    start_window_draw(screen)\r\n    image = load_image('photo_data/photo_menu_data', 'Pac_manModel3.png', 'WHITE')\r\n    # рисуем спрайт\r\n    image1 = pygame.transform.scale(image, (110, 110))\r\n    screen.blit(image1, (width // 2 - 150, height // 2 - 63 - height * 0.33))\r\n    # Показать текст кнопки\r\n    surf_play.blit(text_play, rect_play)\r\n    surf_quit.blit(text_quit, rect_quit)\r\n    surf_settings.blit(text_settings, rect_settings)\r\n    # Нарисуйте кнопку на экране\r\n    screen.blit(surf_play, (play_button_rect.x, play_button_rect.y))\r\n    screen.blit(surf_quit, (quit_button_rect.x, quit_button_rect.y))\r\n    screen.blit(surf_settings, (settings_button_rect.x, settings_button_rect.y))\r\n    # Обновить состояние\r\n    pygame.display.update()\r\n\r\n\r\ndef map_creation(level):\r\n    # Определение карты\r\n    with open(f'levels_data/level{level}_data', 'r', encoding='utf-8') as f:\r\n        read_data = f.readlines()\r\n    map_ = read_data\r\n    # Инициализация Pygame\r\n    pygame.init()\r\n\r\n    if level == 1:\r\n        # Размеры ячеек\r\n        cell_size = 60\r\n        # Создание отступа\r\n        strip = 150\r\n\r\n    elif level == 2:\r\n        cell_size = 25\r\n        strip = 400\r\n\r\n    elif level == 3:\r\n        cell_size = 34\r\n        strip = 360\r\n\r\n    # Создание радиуса шариков\r\n    r = abs(6 - level)\r\n    # Отрисовка карты\r\n    for row_index, row in enumerate(map_):\r\n        for col_index, cell in enumerate(row.split(',')):\r\n            if cell == 'x':\r\n                pygame.draw.rect(screen, (0, 0, 255),\r\n                                 (strip + col_index * cell_size, row_index * cell_size, cell_size, cell_size))\r\n            elif cell == 'o':\r\n                pygame.draw.rect(screen, (0, 0, 0),\r\n                                 (strip + col_index * cell_size, row_index * cell_size, cell_size, cell_size))\r\n                pygame.draw.circle(screen, (255, 255, 0), (\r\n                    strip + col_index * cell_size + cell_size // 2, row_index * cell_size + cell_size // 2), r)\r\n            elif cell == 'g':\r\n                pygame.draw.rect(screen, (30, 10, 10),\r\n                                 (strip + col_index * cell_size, row_index * cell_size, cell_size, cell_size))\r\n            elif cell == 's':\r\n                pygame.draw.rect(screen, (1, 1, 21),\r\n                                 (strip + col_index * cell_size, row_index * cell_size, cell_size, cell_size))\r\n\r\n\r\ndef image_downloader():\r\n    screen.fill((1, 1, 20))\r\n    image_level1 = load_image('photo_data/photo_level_selection', 'level1_image.png')\r\n    image_l1 = pygame.transform.scale(image_level1, (250, 150))\r\n    image_level2 = load_image('photo_data/photo_level_selection', 'level2_image.png')\r\n    image_l2 = pygame.transform.scale(image_level2, (300, 300))\r\n    image_level3 = load_image('photo_data/photo_level_selection', 'level3_image.png')\r\n    image_l3 = pygame.transform.scale(image_level3, (300, 300))\r\n    screen.blit(image_l1, (width // 3 - 360, height // 2 - 130))\r\n    screen.blit(image_l2, (width // 2 - 150, height // 2 - 270))\r\n    screen.blit(image_l3, (width - 425, height // 2 - 270))\r\n\r\n\r\ndef button_level_clicked_checker(pos):\r\n    level = 0\r\n    if fst_level_rect.collidepoint(pos):\r\n        sound_click.play()\r\n        level = 1\r\n    elif snd_level_rect.collidepoint(pos):\r\n        sound_click.play()\r\n        level = 2\r\n    elif trd_level_rect.collidepoint(pos):\r\n        sound_click.play()\r\n        level = 3\r\n    return level\r\n\r\n\r\ndef shower_level_selection():\r\n    # Показать текст кнопки\r\n    surf_back.blit(text_back, rect_back)\r\n    surf_fst_level.blit(fst_level_text, fst_level_back)\r\n    surf_snd_level.blit(snd_level_text, snd_level_back)\r\n    surf_trd_level.blit(trd_level_text, trd_level_back)\r\n    # Нарисуйте кнопку на экране\r\n    screen.blit(surf_back, (back_button_rect.x, back_button_rect.y))\r\n    screen.blit(surf_fst_level, (fst_level_rect.x, fst_level_rect.y))\r\n    screen.blit(surf_snd_level, (snd_level_rect.x, snd_level_rect.y))\r\n    screen.blit(surf_trd_level, (trd_level_rect.x, trd_level_rect.y))\r\n\r\n\r\ndef button_maker(text, width, height, size):\r\n    # Создаем объект шрифта\r\n    font_button = pygame.font.Font(None, size)\r\n\r\n    # Создайте поверхность для кнопки\r\n    button_surface = pygame.Surface((width, height))\r\n\r\n    # Отображение текста на кнопке\r\n    text_button = font_button.render(text, True, (255, 255, 0), (0, 0, 0))\r\n    text_rect = text_button.get_rect(\r\n        center=(button_surface.get_width() / 2,\r\n                button_surface.get_height() / 2))\r\n    return button_surface, text_rect, text_button\r\n\r\n\r\ndef clear_window():\r\n    screen.fill((1, 1, 21))\r\n\r\n\r\ndef start_window_draw(screen):\r\n    screen.fill((1, 1, 20))\r\n    font = pygame.font.Font(None, 20)\r\n    text = font.render(\"By VORFIL Team\", True, (255, 255, 0))\r\n    text_x = width // 2 - text.get_width() // 2 - 270\r\n    text_y = height // 2 - text.get_height() // 2 + 60 - height * 0.33\r\n    screen.blit(text, (text_x, text_y))\r\n    font = pygame.font.Font(None, 200)\r\n    text = font.render(\"PA   -MAN\", True, (255, 255, 0))\r\n    text_x = width // 2 - text.get_width() // 2\r\n    text_y = height // 2 - text.get_height() // 2 - height * 0.33\r\n    screen.blit(text, (text_x, text_y))\r\n    text_w = text.get_width()\r\n    text_h = text.get_height()\r\n    pygame.draw.rect(screen, (255, 255, 0), (text_x - 10, text_y - 10,\r\n                                             text_w + 20, text_h + 20), 1)\r\n\r\n\r\n# Создаем объект pygame.Rect, который представляет границы кнопки\r\nback_button_rect = pygame.Rect(width // 2 - 100, height - 125, 200, 100)\r\nfst_level_rect = pygame.Rect(width // 3 - 315, height // 2 + 50, 150, 50)\r\nsnd_level_rect = pygame.Rect(width // 2 - 75, height // 2 + 50, 150, 50)\r\ntrd_level_rect = pygame.Rect(width - 350, height // 2 + 50, 150, 50)\r\nsurf_back, rect_back, text_back = button_maker('Back', 200, 100, 75)\r\nsurf_fst_level, fst_level_back, fst_level_text = button_maker('1 Level', 150, 50, 50)\r\nsurf_snd_level, snd_level_back, snd_level_text = button_maker('2 Level', 150, 50, 50)\r\nsurf_trd_level, trd_level_back, trd_level_text = button_maker('3 Level', 150, 50, 50)\r\n\r\nplay_button_rect = pygame.Rect(width // 2 - 150, height // 2 - 50, 300, 100)\r\nquit_button_rect = pygame.Rect(width // 2 - 150, height // 2 + 200, 300, 100)\r\nsettings_button_rect = pygame.Rect(width // 2 - 150, height // 2 + 75, 300, 100)\r\nsurf_play, rect_play, text_play = button_maker('Play', 300, 100, 60)\r\nsurf_quit, rect_quit, text_quit = button_maker('Quit', 300, 100, 60)\r\nsurf_settings, rect_settings, text_settings = button_maker('Settings', 300, 100, 60)\r\n\r\nlevel = 0\r\nlevel_selected = False\r\ncoord_balls = [0, 200, 400, 600]\r\nrunning = True\r\nk = 0\r\nmenu_click = False\r\nmenu = True\r\nlevel_selection_flag = False\r\nwhile running:\r\n    # Получаем события из очереди событий\r\n    for event in pygame.event.get():\r\n        # Проверьте событие выхода\r\n        if event.type == pygame.QUIT:\r\n            running = False\r\n        # Проверяем событие нажатия кнопки мыши\r\n        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:\r\n            if not level_selection_flag:\r\n                if menu:\r\n                    if play_button_rect.collidepoint(event.pos):\r\n                        sound_click.play()\r\n                        menu = False\r\n                        level_selection_flag = True\r\n                        clear_window()\r\n                    elif settings_button_rect.collidepoint(event.pos):\r\n                        sound_click.play()\r\n                        clear_window()\r\n                    elif quit_button_rect.collidepoint(event.pos):\r\n                        sound_click.play()\r\n                        running = False\r\n                    if event.type == font_fade:\r\n                        show_text = not show_text\r\n                    if event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN:\r\n                        clear_window()\r\n                        menu_click = True\r\n            else:\r\n                if not menu:\r\n                    if not level_selected:\r\n                        if back_button_rect.collidepoint(event.pos):\r\n                            sound_click.play()\r\n                            menu = True\r\n                            level_selection_flag = False\r\n                        level = button_level_clicked_checker(event.pos)\r\n                        if level > 0:\r\n                            level_selected = True\r\n    if menu:\r\n        if menu_click is False:\r\n            start_window_draw(screen)\r\n            if x_pos < width // 2 - 150:\r\n                x_pos += 10\r\n                image = animation_set[k // 20]\r\n                image1 = pygame.transform.scale(image, (110, 110))\r\n                screen.blit(image1, (x_pos, height // 2 - 63 - height * 0.33))\r\n                for coord in coord_balls:\r\n                    if coord - 50 == x_pos:\r\n                        sound_pac.play()\r\n            else:\r\n                image1 = pygame.transform.scale(animation_set[2], (110, 110))\r\n                screen.blit(image1, (x_pos, height // 2 - 63 - height * 0.33))\r\n                if show_text:\r\n                    screen.blit(text_surf, (width // 2 - 190, height // 1.2))\r\n            k += 4\r\n            if k == 60:\r\n                k = 0\r\n            clock.tick(60)\r\n            # обновление состояния\r\n            time_delta = clock.tick(60) / 1000.0\r\n        else:\r\n            menu_shower()\r\n            # Обновить состояние\r\n            pygame.display.update()\r\n    if not menu:\r\n        if level_selected:\r\n            screen.fill((1, 1, 20))\r\n            map_creation(level)\r\n        else:\r\n            image_downloader()\r\n            shower_level_selection()\r\n    pygame.display.flip()\r\n    # Тимур В.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Start_window.py b/Start_window.py
--- a/Start_window.py	(revision 2ea6853bc2b917bb9735d540a2cfaf23b9c19885)
+++ b/Start_window.py	(date 1737122123886)
@@ -7,7 +7,7 @@
 screen = pygame.display.set_mode(size)
 animation_set = [load_image(f'photo_data/photo_menu_data', f"Pac_manModel{i}.png", 'WHITE') for i in range(1, 4)]
 pygame.display.set_caption('PAC-MAN')
-sound_pac = pygame.mixer.Sound('music_menu_data/Voicy_Pac-Man Pellet Eaten.mp3')
+sound_pac = pygame.mixer.Sound('music_data/music_menu_data/Voicy_Pac-Man Pellet Eaten.mp3')
 sound_click = pygame.mixer.Sound('music_menu_data/click_sound.mp3')
 clock = pygame.time.Clock()
 
